#!/usr/bin/env bash

_exit() {
  echo "$1"
  exit "${2:-1}"
}

case "$1" in
  install)
    path_of_arwbuild="$(find ~/.arrow/repos -type d -name "$2")"    
    if [ -z "$path_of_arwbuild" ]; then
      _exit "Error: Repository '$2' not found."
    fi

    source "$path_of_arwbuild/ARWBUILD" || _exit "Error: Failed to source ARWBUILD file."
    
    package_size=$(curl -s -L -I "$source" | awk -F': ' '/^Content-Length/ { printf "%.2f MB\n", $2/1024/1024 }')
    if [ -z "$package_size" ]; then
      _exit "Error: Unable to retrieve package size."
    fi

    echo -e "Package Name : $pkgname\nPackage Version : $pkgver\nPackage Size : $package_size\nArrow is ready for installation."
    
    read -p "Are you sure you want to proceed with the installation? [Y/n]: " are_you_sure
    if [[ "$are_you_sure" =~ ^[Yy]|yes$ ]]; then
      echo "Starting installation..."
      curl -L# "$source" -o "~/.arrow/source/$(basename "$source")" || _exit "Error: Failed to download package."

      for func in prepare build package check; do
        if type "$func" &>/dev/null; then 
          $func || _exit "Error: '$func' function failed."
        fi
      done
      
      echo -e '\nInstallation completed successfully.'
    else
      echo "Installation canceled."
    fi
  ;;
  
  remove)
    for dir in source packages bin; do
      find "$dir" -type f -name "$2-*.*" -exec rm -r {} + &>/dev/null
    done
    echo "Successfully removed the package: $2"
  ;;
  
  repo)
    case "$2" in
      add)
        echo "Adding repository: $3..."
        mkdir -p ~/.arrow/repos/"$3" &>/dev/null
        git clone "$2" ~/.arrow/repos/"$3" &>/dev/null || _exit "Error: Failed to clone repository."
        echo "Repository added successfully."
      ;;
      remove)
        find ~/.arrow/repos/ -type d -name "$2" -exec rm -rf {} +
        echo "Repository removed successfully."
      ;;
    esac
  ;;
esac